// Copyright Â© 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openmeeting.user;

option go_package = "github.com/openimsdk/protocol/openmeeting/user";


message getDesignateUsersReq{
  repeated string userIDs = 1;
}
message getDesignateUsersResp{
  repeated UserInfo usersInfo = 1;
}

message UserInfo{
  string userID = 1;
  string nickname = 2;
  string account = 3;
  string password = 4;
}

message userRegisterReq {
  repeated UserInfo users = 1;
}
message userRegisterResp {
}

message userLoginReq {
  string areaCode = 1;
  string phoneNumber = 2;
  string verifyCode = 3;
  string account = 4;
  string password = 5;
  int32 platform = 6;
  string deviceID = 7;
  string email = 8;
}

message userLoginResp {
  string token = 1;
  string nickname = 2;
  string userID = 3;
}

message getUserTokenReq{
  string userID = 1;
}

message getUserTokenResp{
  string token = 1;
}

message getUserInfoReq{
  string userID = 1;
}

message getUserInfoResp{
  string userID = 1;
  string nickname = 2;
  string account = 3;
  string faceURL = 4;
}

message updateUserPasswordReq{
  string userID = 1;
  string password = 2;
}

message updateUserPasswordResp{

}

message ClearUserTokenReq{
  string userID = 1;
}

message ClearUserTokenResp{

}

message logoutReq{
  string userID = 1;
}

message logoutResp{
}

message parseTokenReq{
  string token = 1;
}
message parseTokenResp{
  string userID = 1;
  int64 expireTimeSeconds = 2;
}

service user {
  //Get the specified user information full field
  rpc getDesignateUsers(getDesignateUsersReq) returns(getDesignateUsersResp);
  //user registration
  rpc userRegister(userRegisterReq) returns (userRegisterResp);
  //user login
  rpc userLogin(userLoginReq) returns (userLoginResp);
  // get user token
  rpc getUserToken(getUserTokenReq) returns (getUserTokenResp);
  // get user info
  rpc getUserInfo(getUserInfoReq) returns (getUserInfoResp);
  // update user password
  rpc updateUserPassword(updateUserPasswordReq) returns (updateUserPasswordResp);
  // clear user token
  rpc ClearUserToken(ClearUserTokenReq) returns(ClearUserTokenResp);
  // user log out
  rpc userLogout(logoutReq) returns(logoutResp);
  // parse token
  rpc parseToken(parseTokenReq) returns(parseTokenResp);
}


